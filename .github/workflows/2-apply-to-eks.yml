name: "2-Deploy Apps to EKS"

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: "AWS Region (e.g., us-east-1)"
        required: true
        default: "us-east-1"
      cluster_name:
        description: "EKS Cluster Name (e.g., staging-eks-demo)"
        required: true
        default: "staging-eks-demo"

jobs:
  deploy-to-eks:
    name: "Deploy ALB Controller and ArgoCD"
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      #-------------------------------------------------------------------------------------------------------------------------------
      # 1. Connect to the EKS Cluster
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ github.event.inputs.aws_region }} --name ${{ github.event.inputs.cluster_name }}
          echo "CORRECT: Kubeconfig updated for cluster: ${{ github.event.inputs.cluster_name }}"
          sleep 5
          echo "-----> Checking nodes:"
          kubectl get nodes
          sleep 5
      #-------------------------------------------------------------------------------------------------------------------------------
      # 2. Ensure IAM OIDC provider exists for the cluster
      - name: Ensure IAM OIDC Provider Exists
        run: |
          echo "Installing eksctl..."
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          echo "eksctl version: $(eksctl version)"
          
          echo "Associating IAM OIDC provider for cluster..."
          eksctl utils associate-iam-oidc-provider --cluster ${{ github.event.inputs.cluster_name }} --approve
          echo "IAM OIDC provider check complete. Waiting for 15 seconds for propagation..."
          sleep 15
      #-------------------------------------------------------------------------------------------------------------------------------
      # 3. Create IAM Policy for AWS Load Balancer Controller
      - name: Create IAM Policy for ALB Controller
        id: create_policy
        run: |
          POLICY_NAME="AWSLoadBalancerControllerIAMPolicy"
          
          # Check if the policy already exists
          EXISTING_POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)

          if [ -n "$EXISTING_POLICY_ARN" ]; then
            echo "Policy $POLICY_NAME already exists: $EXISTING_POLICY_ARN"
            # Note: This workflow assumes an existing policy has the right permissions.
            # If you run into issues after the first run, you may need to delete the policy in IAM to have it recreated with the Route53 permissions.
            POLICY_ARN=$EXISTING_POLICY_ARN
          else
            echo "Policy $POLICY_NAME not found. Creating it..."
            curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
            
            # --- START OF THE FIX for ROUTE 53---
            # Add required Route53 permissions for automatic DNS updates
            echo "Adding Route53 permissions to the IAM policy..."
            jq '.Statement += [{
                "Effect": "Allow",
                "Action": [
                    "route53:ChangeResourceRecordSets",
                    "route53:ListResourceRecordSets",
                    "route53:ListHostedZonesByName"
                ],
                "Resource": "*"
            }]' iam-policy.json > iam-policy-modified.json && mv iam-policy-modified.json iam-policy.json
            # --- END OF THE FIX ---
            
            POLICY_ARN=$(aws iam create-policy --policy-name $POLICY_NAME --policy-document file://iam-policy.json --query 'Policy.Arn' --output text)
            echo "Created policy: $POLICY_ARN"
          fi
          # Set the policy ARN as a step output to be used by the next step
          echo "policy_arn=$POLICY_ARN" >> $GITHUB_OUTPUT
      #-------------------------------------------------------------------------------------------------------------------------------
      # 4. Create IAM Role for Service Account (IRSA)
      - name: Create IAM Role for Service Account (IRSA)
        id: create_irsa_role
        run: |
          SERVICE_ACCOUNT_NAME=aws-load-balancer-controller
          ROLE_NAME=${{ github.event.inputs.cluster_name }}-ALBControllerRole
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          OIDC_PROVIDER_FULL=$(aws eks describe