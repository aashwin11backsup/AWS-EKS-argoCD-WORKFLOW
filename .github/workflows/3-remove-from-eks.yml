name: '3-Destroy Apps from EKS'

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region (e.g., us-east-1)'
        required: true
        default: 'us-east-1'
      cluster_name:
        description: 'EKS Cluster Name (e.g., staging-eks-demo)'
        required: true
        default: 'staging-eks-demo'

jobs:
  destroy-from-eks:
    name: 'Destroy ALB and Applications'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

#--------------------------- 1. Update kube-config-----------------------------------------

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ github.event.inputs.aws_region }} --name ${{ github.event.inputs.cluster_name }}
          echo "CORRECT:---> Kubeconfig updated for cluster: ${{ github.event.inputs.cluster_name }}"
#-------------------------------------------------------------------------------------------------------------------------------

#--------------------------- 2. Delete Argo CD Applications to trigger cleanup ---------------------------

      - name: Delete Argo CD Applications
        run: |
          echo "****-------------------Deleting Argo CD Application manifests...--------------****"
          # This tells Argo CD to prune all the resources it manages (Ingress, Deployment, Service)
          kubectl delete -f argocd/ --ignore-not-found=true
          echo "Waiting 30 seconds for Argo CD to begin pruning resources..."
          sleep 30
#-------------------------------------------------------------------------------------------------------------------------------

#--------------------------- 3. Wait for the ALB to be Deleted ---------------------------

      - name: Wait for ALB Deletion
        run: |
          # Fetching ALB HOSTNAME from the shared ingress
          ALB_HOSTNAME=$(kubectl get ingress shared-main-ingress -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")

          if [ -z "$ALB_HOSTNAME" ]; then
            echo "------XXXX--- Could not find an ALB hostname from the Ingress. It might have been deleted already ---XXXX----------------"
            echo "Skipping polling and proceeding."
          else
            echo "Actively polling to confirm deletion of ALB: $ALB_HOSTNAME"
            
            SECONDS=0
            TIMEOUT=300 # 5-minute timeout

            while [ $SECONDS -lt $TIMEOUT ]; do
              ALB_ARN=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?DNSName=='$ALB_HOSTNAME'].LoadBalancerArn" --output text)
              
              if [ -z "$ALB_ARN" ]; then
                echo "CORRECT:------> Success! The ALB is no longer found in AWS and is confirmed deleted."
                break
              fi
              
              echo "****-------------------Waiting for ALB to be deleted... ($SECONDS/$TIMEOUT seconds)--------------****"
              sleep 15
              SECONDS=$((SECONDS + 15))
            done

            if [ $SECONDS -ge $TIMEOUT ]; then
              echo "ERROR: Timed out after 5 minutes waiting for ALB to be deleted."
              # We won't exit 1 here to allow the rest of the cleanup to proceed
            fi
          fi

          echo "Sleeping for 60 seconds to allow for Target Group/SG deletion..."
          sleep 60
#-------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------- 4. Uninstall Helm Charts ---------------------------------------------------------------------

      - name: Uninstall Helm Charts
        run: |
          echo "xxxx-------------- Uninstalling ArgoCD Helm chart----------------X"
          helm uninstall argocd -n argocd --wait || echo "ArgoCD not found, skipping."

          echo "xxxx---------Uninstalling AWS Load Balancer Controller Helm chart.----------xxxx"
          helm uninstall aws-load-balancer-controller -n kube-system --wait || echo "AWS Load Balancer Controller not found, skipping."
#-------------------------------------------------------------------------------------------------------------------------------

#-------------------------------------  5. Detach and Delete IAM Policy and Role ----------------------------------------

      - name: Destroy IAM Policy and Role for ALB Controller
        run: |
          echo "---------> Starting cleanup of IAM Role and Policy..."
          POLICY_NAME="AWSLoadBalancerControllerIAMPolicy"
          ROLE_NAME=${{ github.event.inputs.cluster_name }}-ALBControllerRole

          POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)

          if [ -z "$POLICY_ARN" ]; then
            echo "IAM Policy '$POLICY_NAME' not found. Skipping cleanup."
          else
            echo "Found Policy ARN: $POLICY_ARN"
            echo "Detaching policy $POLICY_ARN from role $ROLE_NAME..."
            aws iam detach-role-policy --role-name $ROLE_NAME --policy-arn $POLICY_ARN || echo "Failed to detach policy, it might have already been detached."
            sleep 5

            echo "Deleting policy $POLICY_ARN..."
            aws iam delete-policy --policy-arn $POLICY_ARN || echo "Failed to delete policy, it might have been already deleted."
          fi
          
          echo "Deleting role $ROLE_NAME..."
          aws iam delete-role --role-name $ROLE_NAME || echo "Failed to delete role, it might have been already deleted."
          
          echo "COMPLETED:-------> IAM cleanup process complete."
#-------------------------------------------------------------------------------------------------------------------------------

      - name: Completion Step
        run: |
          echo "=========================================================================================="
          echo "COMPLETED:-->>EKS application cleanup is complete."
          echo "You can now safely run the Terraform workflow to destroy the remaining EKS infrastructure."
          echo "=========================================================================================="
#-------------------------------------------------------------------------------------------------------------------------------